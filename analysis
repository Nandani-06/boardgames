#!/bin/bash

# ----------------------------------------------------------------------
# Script Name: analyze_game_data
#
# Description:
#   This script performs analysis on a cleaned, tab-separated dataset 
#   of board games. It provides insights into:
#
#     1. The most popular game mechanics (from column 13)
#     2. The most popular game domains (from column 14)
#     3. The correlation between year of publication (column 3) and 
#        average game rating (column 9)
#     4. The correlation between game complexity (column 11) and 
#        average game rating (column 9)
#
#   It uses `awk` for data extraction and preprocessing, and `bc` for
#   computing statistics such as Pearson correlation.
#
# Usage:
#   ./analyze_game_data <cleaned_input_file.tsv>
# ----------------------------------------------------------------------

# Checks if file is provided in input
if [ -z "$1" ]; then
  echo "Usage: $0 <cleaned_input_file.tsv>"
  exit 1
fi

input_file="$1"

# This function finds the most occurring item in a specific column
count_occurrences() {
  local col="$1"
  local label="$2"
  awk -F'\t' -v c="$col" -v name="$label" '
    NR > 1 && $c != "" {
      n = split($c, parts, ";")   # Split contents from column into array
      for (i = 1; i <= n; i++) {
        gsub(/^ +| +$/, "", parts[i])  #Trims leading and trailing spaces
        count[parts[i]]++  #Counts occurrences 
      }
    }
    END {    #Goes through the count dictionary to find the most occurring
      max = 0
      for (item in count) {
        if (count[item] > max) {
          max = count[item]
          popular = item
        }
      }
      printf "The most popular %s is %s found in %d games\n", name, popular, max
    }
  ' "$input_file"
}

# Function to calculate Pearson correlation coefficient between two variables in a file with two columns.
# Assumes whitespace-separated values (no header).
calculate_correlation() {
  local file="$1"
  #Initialise sum and count to 0
  local sum_x=0 sum_y=0 n=0

  #Calculate the sum of x and y
  while read -r x y; do
    sum_x=$(echo "$sum_x + $x" | bc -l)
    sum_y=$(echo "$sum_y + $y" | bc -l)
    ((n++))
  done < "$file"

  #If no data return 0
  if [ "$n" -eq 0 ]; then
    echo "0.000"
    return
  fi

  #Calculate the mean
  local mean_x=$(echo "$sum_x / $n" | bc -l)
  local mean_y=$(echo "$sum_y / $n" | bc -l)

  #Initialise sum for calculating correlations 
  local sum_xy=0 sum_x2=0 sum_y2=0

  #Compute components for correlation
  while read -r x y; do
    dx=$(echo "$x - $mean_x" | bc -l)
    dy=$(echo "$y - $mean_y" | bc -l)
    sum_xy=$(echo "$sum_xy + ($dx * $dy)" | bc -l)
    sum_x2=$(echo "$sum_x2 + ($dx * $dx)" | bc -l)
    sum_y2=$(echo "$sum_y2 + ($dy * $dy)" | bc -l)
  done < "$file"

  #Avoids division by 0 if 0 variance in either variables
  if [ "$(echo "$sum_x2 == 0" | bc -l)" -eq 1 ] || [ "$(echo "$sum_y2 == 0" | bc -l)" -eq 1 ]; then
    echo "0.000"
  else
    # Calculate Pearson correlation: r = Σ[(x - x̄)(y - ȳ)] / sqrt(Σ(x - x̄)² * Σ(y - ȳ)²)
    printf "%.3f\n" "$(echo "$sum_xy / sqrt($sum_x2 * $sum_y2)" | bc -l)"
  fi
}

# 1. Most popular game mechanics (column 13)
count_occurrences 13 "game mechanics"

# 2. Most popular game domain (column 14)
count_occurrences 14 "game domain"

# 3. Correlation: Year (3) vs Rating Average (9)
#    - Filter valid numeric values
#    - Save to temp file
#    - Compute correlation
tmp1=$(mktemp)
awk -F'\t' 'NR > 1 && $3 ~ /^[0-9]+$/ && $9 ~ /^[0-9]+(\.[0-9]+)?$/ { print $3, $9 }' "$input_file" > "$tmp1"
correlation1=$(calculate_correlation "$tmp1")
rm -f "$tmp1"
echo "The correlation between the year of publication and the average rating is $correlation1"

# 4. Correlation: Complexity Average (11) vs Rating Average (9)
tmp2=$(mktemp)
awk -F'\t' 'NR > 1 && $11 ~ /^[0-9]+(\.[0-9]+)?$/ && $9 ~ /^[0-9]+(\.[0-9]+)?$/ { print $11, $9 }' "$input_file" > "$tmp2"
correlation2=$(calculate_correlation "$tmp2")
rm -f "$tmp2"
echo "The correlation between the complexity of a game and its average rating is $correlation2"

