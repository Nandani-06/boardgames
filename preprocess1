#!/bin/bash

# Exit immediately on any error
set -e

# Check if an input file is provided
if [ -z "$1" ]; then
  echo "Usage: $0 <input_file>"
  exit 1
fi

input_file="$1"

# Check if input file exists
if [ ! -f "$input_file" ]; then
  echo "Error: File not found: $input_file"
  exit 1
fi

# Output file: input name without extension + .tsv
base_name=$(basename "$input_file" | sed 's/\.[^.]*$//')
output_file="${base_name}.tsv"

# Step 1: Convert semicolon-separated + Windows line endings to tab-separated Unix lines
# Convert semicolons to tabs and remove Windows carriage returns (\r)
sed 's/;/\t/g' "$input_file" | tr -d '\r' > temp1.tsv

# Step 2: Convert comma to dot in the Rating Average column (4th column)
# Replace commas with dots only in the 4th column
awk -F'\t' 'BEGIN {OFS=FS} NR==1 {print; next} {gsub(/,/, ".", $4); print}' temp1.tsv > temp2.tsv

# Step 3: Remove non-ASCII characters (e.g., CO2 -> CO)
# Remove non-ASCII characters using tr
tr -cd '\11\12\40-\176' < temp2.tsv > temp3.tsv

# Step 4: Handle missing IDs by assigning new unique IDs
# Get the max numeric ID from the first column
max_id=$(awk -F'\t' 'NR>1 && $1 ~ /^[0-9]+$/ {if ($1+0 > max) max = $1+0} END {print max}' temp3.tsv)
next_id=$((max_id + 1))

# Step 5: Replace empty IDs with new unique ones
awk -F'\t' -v start_id="$next_id" 'BEGIN {OFS=FS} 
NR==1 {print; next} 
{
    if ($1 == "") {
        $1 = start_id++
    }
    print
}' temp3.tsv > "$output_file"

# Cleanup temporary files
rm -f temp1.tsv temp2.tsv temp3.tsv

echo "Preprocessing complete. Output saved to: $output_file"

