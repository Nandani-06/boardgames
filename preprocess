#!/bin/bash

# ----------------------------------------------------------------------
# Script Name: preprocess.sh
#
# Description:
#   This script preprocesses a raw data file (e.g., CSV or TXT) of game 
#   records by applying the following cleaning steps:
#
#     1. Converts semicolon (;) separators to tab (\t) characters
#     2. Converts Microsoft Windows line endings (carriage return \r) 
#        to Unix format
#     3. Replaces commas with dots in the 4th column (Rating Average)
#     4. Removes non-ASCII characters to clean malformed text
#     5. Identifies and fills in missing IDs (in the first column) 
#        with unique new values starting from the current maximum
#     6. Outputs the cleaned file with the same base name and `.tsv` extension
#
# Usage:
#   ./preprocess.sh <input_file>
# ----------------------------------------------------------------------

# Exits in case of any error
set -e

# Checks if file in provided in input
if [ -z "$1" ]; then
  echo "Usage: $0 <input_file>"
  exit 1
fi

input_file="$1"

# Checks if input file exists
if [ ! -f "$input_file" ]; then
  echo "Error: File not found: $input_file"
  exit 1
fi

# Preparing output file
base_name=$(basename "$input_file" | sed 's/\.[^.]*$//')  #Extracting file name
output_file="${base_name}.tsv"  #Adding extension of .tsv

#It converts semicolons to tabs(\t) and remove any carriage returns (\r) characters
sed 's/;/\t/g' "$input_file" | tr -d '\r' > temp1.tsv

# Replace commas with dots for the 4th column (Ratings)
awk -F'\t' 'BEGIN {OFS=FS} NR==1 {print; next} {gsub(/,/, ".", $4); print}' temp1.tsv > temp2.tsv

# Using tr to remove non-ASCII characters
tr -cd '\11\12\40-\176' < temp2.tsv > temp3.tsv

# Extracts the maximum numeric ID from the first column
max_id=$(awk -F'\t' 'NR>1 && $1 ~ /^[0-9]+$/ {if ($1+0 > max) max = $1+0} END {print max}' temp3.tsv)
next_id=$((max_id + 1))

# Adding new IDs on empty cells in first column
awk -F'\t' -v start_id="$next_id" 'BEGIN {OFS=FS} 
NR==1 {print; next} 
{
    if ($1 == "") {
        $1 = start_id++
    }
    print
}' temp3.tsv > "$output_file"

# Cleaning temporary files
rm -f temp1.tsv temp2.tsv temp3.tsv

echo "Preprocessing complete. Output saved to: $output_file"

