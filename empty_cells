#!/bin/bash

# ----------------------------------------------------------------------
# Script Name: empty_cells
#
# Description:
#   This script analyzes a delimited text file (CSV, TSV, or TXT) and 
#   reports the number of empty (missing) cells in each column.
#   It reads the column headers from the first line of the file and 
#   scans all subsequent rows to count missing values per column.
#
# Features:
#   - Supports input files with semicolon (;) or tab (\t) delimiters
#   - Automatically detects delimiter based on file extension
#   - Trims whitespace before checking for empty values
#   - Outputs counts of empty cells for each column by name
#
# Usage:
#   ./empty_cells <input_file>
#   Accepted file types: .csv, .txt, .tsv
#-----------------------------------------------------------------------

# Check input i.e. number of arguements passed
if [ $# -ne 1 ]; then
    echo "Usage: $0 <input_file>"
    exit 1
fi

#Assigning first argument
file="$1"

# Validate file
if [ ! -f "$file" ]; then
    echo "File not found: $file"
    exit 1
fi

# Determine delimiter
case "${file##*.}" in
    csv|txt) delimiter=';' ;;  # If the file is csv or txt
    tsv) delimiter=$'\t' ;;  # If the file is tsv
    *) echo "Unsupported file extension"; exit 1 ;; # For all other types
esac

echo "Running empty_cells on the complete dataset, $file, the following counts are reported:"

# Read header and get columns
IFS= read -r header < "$file"  # Reads first line from the file
IFS="$delimiter" read -ra columns <<< "$header"   # Splits header into array called columns
num_columns=${#columns[@]}  # Gets total number of columns by counting column array length

# Initialize array
declare -a empty_counts   #Declares an indexed array named empty_counts
for ((i = 0; i < num_columns; i++)); do
    empty_counts[i]=0
done

# Read file line by line (skip header)
line_number=0
while IFS= read -r line || [ -n "$line" ]; do
    ((line_number++))

    # Skip header
    if [ $line_number -eq 1 ]; then
        continue
    fi

    # Split line into fields
    IFS="$delimiter" read -ra fields <<< "$line"

    for ((i = 0; i < num_columns; i++)); do
        value="${fields[i]}"
        # Trim whitespace
        value="${value#"${value%%[![:space:]]*}"}"  # Remove leading spaces
        value="${value%"${value##*[![:space:]]}"}"  # Remove trailing spaces
        if [[ -z "$value" ]]; then   # If the string left is null
            ((empty_counts[i]++))
        fi
    done
done < "$file"

# Output results
for ((i = 0; i < num_columns; i++)); do
    col="${columns[i]}"
    col="${col//$'\r'/}"
    echo "$col: ${empty_counts[i]}"
done

